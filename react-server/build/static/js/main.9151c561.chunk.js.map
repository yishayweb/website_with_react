{"version":3,"sources":["components/Landing/Landing.js","actions/index.js","components/LoginForm/LoginForm.js","components/EntryPoint/App.js","serviceWorker.js","reducers/index.js","reducers/reducerUser.js","index.js"],"names":["Landing","state","isLoggedIn","_this2","this","setTimeout","props","loginValidatorCallback","prevProps","prevState","history","push","setState","_this3","headers","Content-Type","Authorization","localStorage","getItem","axios","get","then","_ref","data","status","console","log","catch","error","_this4","user","react_default","a","createElement","className","onClick","logOut","Component","connect","callback","_ref2","Object","asyncToGenerator","regenerator_default","mark","_callee2","dispatch","wrap","_context2","prev","next","_ref3","stop","_x2","apply","arguments","renderField","input","label","type","_ref$meta","meta","touched","assign","placeholder","LoginForm","values","signup","handleSubmit","onSubmit","bind","Field","name","component","reduxForm","form","destroyOnUnmount","user_obj","_callee","res","_context","post","sent","payload","token","setItem","t0","_x","withRouter","App","react_router_dom","react_router","exact","path","Boolean","window","location","hostname","match","combineReducers","length","undefined","action","objectSpread","store","createStore","reducers","applyMiddleware","reduxThunk","ReactDOM","render","es","EntryPoint_App","document","querySelector","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4TAWMA,qNACJC,MAAQ,CAACC,WAAY,8FAED,IAAAC,EAAAC,KAClBC,WAAW,kBAAMF,EAAKG,MAAMJ,WAAW,SAACA,GAAD,OAAgBC,EAAKI,uBAAuBL,MAAc,gDAGhFM,EAAWC,GACxBA,EAAUP,aAAeE,KAAKH,MAAMC,YACtCE,KAAKE,MAAMI,QAAQC,KAAK,oDAILT,GACjBA,EACFE,KAAKQ,SAAU,CAAEV,YAAY,IAG7BE,KAAKE,MAAMI,QAAQC,KAAK,sCAInB,IAAAE,EAAAT,KACHU,EAAU,CAACA,QAAS,CAACC,eAAgB,mBAAoBC,cAAiB,UAAYC,aAAaC,QAAQ,gBAEjGC,IAAMC,IAAI,gBAAiBN,GACjCO,KAAK,SAAAC,GAAoB,IAAlBC,EAAkBD,EAAlBC,KACE,MADgBD,EAAZE,SAEjBC,QAAQC,IAAIH,GACZV,EAAKD,SAAS,CAAEV,YAAY,OAG7ByB,MAAM,SAACC,GACRH,QAAQC,IAAIE,sCAIP,IAAAC,EAAAzB,KAEP,OADAqB,QAAQC,IAAItB,KAAKE,MAAMwB,MACO,YAA1B1B,KAAKH,MAAMC,WAEX6B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBAAf,cAMFH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBAAf,UAEEH,EAAAC,EAAAC,cAAA,UAAQE,QAAS,kBAAMN,EAAKO,WAA5B,mBAjDcC,cA2DPC,kBAJf,SAAyBrC,GACvB,MAAO,CAAC6B,KAAM7B,EAAM6B,OAGkB,CAAE5B,WCnDhB,SAACqC,GAAD,sBAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,EAAAX,EAAAY,KAAc,SAAAC,EAAMC,GAAN,IAAAhC,EAAA,OAAA6B,EAAAX,EAAAe,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACtCzB,QAAQC,IAAIT,aAAaC,QAAQ,eAC7BJ,EAAU,CAACA,QAAS,CAACC,eAAgB,mBAAoBC,cAAiB,UAAYC,aAAaC,QAAQ,gBAEjGC,IAAMC,IAAI,YAAaN,GAC7BO,KAAK,SAAA8B,GAAoB,IAAlB5B,EAAkB4B,EAAlB5B,KACE,MADgB4B,EAAZ3B,SAEjBC,QAAQC,IAAIH,GACZgB,GAAS,MAEVZ,MAAM,SAACC,GACRH,QAAQC,IAAIE,GACZW,GAAS,KAZ2B,wBAAAS,EAAAI,SAAAP,MAAd,gBAAAQ,GAAA,OAAAb,EAAAc,MAAAlD,KAAAmD,YAAA,KDmDXjB,CAAyCtC,qBEhElDwD,EAAc,SAAAlC,GAAA,IAAGmC,EAAHnC,EAAGmC,MAAOC,EAAVpC,EAAUoC,MAAOC,EAAjBrC,EAAiBqC,KAAjBC,EAAAtC,EAAuBuC,KAAQC,EAA/BF,EAA+BE,QAASlC,EAAxCgC,EAAwChC,MAAxC,OAClBG,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,aAAQyB,GACR3B,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,QAAAQ,OAAAsB,OAAA,GAAWN,EAAX,CAAkBE,KAAMA,EAAMK,YAAaN,KAC1CI,GAAWlC,GAASG,EAAAC,EAAAC,cAAA,YAAOL,MAK5BqC,mLAEKC,GACPzC,QAAQC,IAAI,aACZD,QAAQC,IAAIwC,GACZ9D,KAAKE,MAAM6D,OAAOD,EAAQ9D,KAAKE,MAAMI,0CAG9B,IACC0D,EAAiBhE,KAAKE,MAAtB8D,aACR,OACErC,EAAAC,EAAAC,cAAA,QAAMoC,SAAUD,EAAahE,KAAKiE,SAASC,KAAKlE,QAC9C2B,EAAAC,EAAAC,cAACsC,EAAA,EAAD,CACEC,KAAK,OACLd,MAAM,OACNC,KAAK,OACLc,UAAWjB,IACbzB,EAAAC,EAAAC,cAACsC,EAAA,EAAD,CACEC,KAAK,QACLd,MAAM,QACNC,KAAK,OACLc,UAAWjB,IACbzB,EAAAC,EAAAC,cAACsC,EAAA,EAAD,CACEC,KAAK,WACLd,MAAM,WACNC,KAAK,OACLc,UAAWjB,IACbzB,EAAAC,EAAAC,cAACsC,EAAA,EAAD,CACEC,KAAK,MACLd,MAAM,MACNC,KAAK,OACLc,UAAWjB,IACbzB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAQ0B,KAAK,UAAb,mBAjCctB,aA4CTqC,kBAAU,CACvBC,KAAM,YACNC,kBAAkB,GAFLF,CAGZpC,YAPH,WACE,MAAO,IAMmB,CAAE6B,OD3DR,SAACU,EAAUnE,GAAX,sBAAAY,EAAAmB,OAAAC,EAAA,EAAAD,CAAAE,EAAAX,EAAAY,KAAuB,SAAAkC,EAAMhC,GAAN,IAAAiC,EAAA,OAAApC,EAAAX,EAAAe,KAAA,SAAAiC,GAAA,cAAAA,EAAA/B,KAAA+B,EAAA9B,MAAA,cAAA8B,EAAA/B,KAAA,EAAA+B,EAAA9B,KAAA,EAEvB/B,IAAM8D,KAAK,SAAUJ,EAAU,CAAE/D,QAAS,CAAEC,eAAgB,sBAFrC,OAEnCgE,EAFmCC,EAAAE,KAGzCzD,QAAQC,IAAIqD,GACO,MAAfA,EAAIvD,SACNsB,EAAS,CAAEa,KAPK,SAOSwB,QAASJ,EAAIxD,KAAK6D,QAC3C1E,EAAQC,KAAK,SACbM,aAAaoE,QAAQ,aAAcN,EAAIxD,KAAK6D,QAPLJ,EAAA9B,KAAA,gBAAA8B,EAAA/B,KAAA,EAAA+B,EAAAM,GAAAN,EAAA,SAWzCvD,QAAQC,IAARsD,EAAAM,IAXyC,yBAAAN,EAAA5B,SAAA0B,EAAA,iBAAvB,gBAAAS,GAAA,OAAAjE,EAAAgC,MAAAlD,KAAAmD,YAAA,KC2DnBjB,CAAqCkD,YAAWvB,KCpBpCwB,0LA5BX,IAEI3E,EAAU,CAACA,QAAS,CAACC,eAAgB,mBAAoBC,cAAiB,iKAEhEG,IAAMC,IAAI,YAAaN,GAC7BO,KAAK,SAAAC,GAAoB,IAAlBC,EAAkBD,EAAlBC,KACE,MADgBD,EAAZE,QAEjBC,QAAQC,IAAIH,KAEbI,MAAM,SAACC,GACRH,QAAQC,IAAIE,sCAKd,OACEG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACyD,EAAA,EAAD,KACE3D,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC0D,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIpB,UAAWR,IACjClC,EAAAC,EAAAC,cAAC0D,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,QAAQpB,UAAWzE,cAvB/BqC,aCAEyD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iFCdSC,cAAgB,CAC7BrE,KCHa,WAA6B,IAApB7B,EAAoBsD,UAAA6C,OAAA,QAAAC,IAAA9C,UAAA,GAAAA,UAAA,GAAZ,GAAI+C,EAAQ/C,UAAA6C,OAAA,EAAA7C,UAAA,QAAA8C,EAC1C,OAAQC,EAAO3C,MACb,ILFkB,SKGhB,OAAOlB,OAAA8D,EAAA,EAAA9D,CAAA,GAAIxC,EAAX,CAAkBmF,MAAOkB,EAAOnB,UAClC,QACE,OAAOlF,IDDX0E,KAAMD,MEMF8B,EAAQC,YAAYC,EAAU,GAAIC,YAAgBC,MAExDC,IAASC,OACP/E,EAAAC,EAAAC,cAAC8E,EAAA,EAAD,CAAUP,MAAOA,GAAOzE,EAAAC,EAAAC,cAAC+E,EAAD,OACxBC,SAASC,cAAc,UHiHnB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhG,KAAK,SAAAiG,GACjCA,EAAaC","file":"static/js/main.9151c561.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport axios from 'axios';\r\nimport {\r\n  Link,\r\n  Redirect\r\n} from 'react-router-dom'\r\nimport { isLoggedIn } from '../../actions';\r\nimport './landing.css';\r\n\r\n\r\nclass Landing extends Component {\r\n  state = {isLoggedIn: \"unknown\"}\r\n\r\n  componentDidMount() {\r\n    setTimeout(() => this.props.isLoggedIn((isLoggedIn) => this.loginValidatorCallback(isLoggedIn)), 1000);\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if (prevState.isLoggedIn && !this.state.isLoggedIn) {\r\n      this.props.history.push(\"/\");\r\n    }\r\n  }\r\n\r\n  loginValidatorCallback(isLoggedIn) {\r\n    if (isLoggedIn) {\r\n      this.setState ({ isLoggedIn: true });\r\n    }\r\n    else {\r\n      this.props.history.push(\"/\");\r\n    }\r\n  }\r\n\r\n  logOut() {\r\n    var headers = {headers: {'Content-Type': 'application/json', 'Authorization': 'Bearer ' + localStorage.getItem('user_token')}}\r\n\r\n    var request = axios.get('/users/logout', headers);\r\n    request.then(({data, status}) => {\r\n      if (status === 200) {\r\n        console.log(data);\r\n        this.setState({ isLoggedIn: false });\r\n        //localStorage.removeItem('user_token');\r\n      }\r\n    }).catch((error) => {\r\n      console.log(error);\r\n    });\r\n  }\r\n\r\n  render() {\r\n    console.log(this.props.user);\r\n    if (this.state.isLoggedIn === \"unknown\") {\r\n      return (\r\n        <div className=\"landing-main-div\">\r\n          Loading...\r\n        </div>\r\n      );\r\n    }\r\n    return (\r\n      <div className=\"landing-main-div\">\r\n        Landing\r\n        <button onClick={() => this.logOut()}>Log Out</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {user: state.user}\r\n}\r\n\r\nexport default connect(mapStateToProps, { isLoggedIn })(Landing);\r\n","import axios from 'axios';\r\n\r\nexport const SIGNUP = \"signup\";\r\n\r\nexport const signup = (user_obj, history) => async dispatch => {\r\n  try {\r\n    const res = await axios.post('/users', user_obj, { headers: { 'Content-Type': 'application/json' } });\r\n    console.log(res);\r\n    if (res.status === 201) {\r\n      dispatch({ type: SIGNUP, payload: res.data.token });\r\n      history.push('/home');\r\n      localStorage.setItem('user_token', res.data.token);\r\n    }\r\n  }\r\n  catch(e) {\r\n    console.log(e);\r\n  }\r\n}\r\n\r\nexport const isLoggedIn = (callback) => async dispatch => {\r\n  console.log(localStorage.getItem('user_token'));\r\n  var headers = {headers: {'Content-Type': 'application/json', 'Authorization': 'Bearer ' + localStorage.getItem('user_token')}}\r\n\r\n  var request = axios.get('/users/me', headers);\r\n  request.then(({data, status}) => {\r\n    if (status === 200) {\r\n      console.log(data);\r\n      callback(true);\r\n    }\r\n  }).catch((error) => {\r\n    console.log(error);\r\n    callback(false);\r\n  });\r\n}\r\n","import React, { Component } from 'react'\r\nimport { Field, reduxForm } from 'redux-form'\r\nimport { connect } from 'react-redux';\r\nimport { Link, withRouter } from 'react-router-dom';\r\nimport { signup } from '../../actions'\r\n\r\nconst renderField = ({ input, label, type, meta: { touched, error } }) => (\r\n  <div>\r\n    <label>{label}</label>\r\n    <div>\r\n      <input {...input} type={type} placeholder={label}/>\r\n      {touched && error && <span>{error}</span>}\r\n    </div>\r\n  </div>\r\n)\r\n\r\nclass LoginForm extends Component {\r\n\r\n  onSubmit(values) {\r\n    console.log(\"submitted\");\r\n    console.log(values);\r\n    this.props.signup(values, this.props.history);\r\n  }\r\n\r\n  render() {\r\n    const { handleSubmit } = this.props;\r\n    return (\r\n      <form onSubmit={handleSubmit(this.onSubmit.bind(this))}>\r\n        <Field\r\n          name=\"name\"\r\n          label=\"Name\"\r\n          type=\"text\"\r\n          component={renderField} />\r\n        <Field\r\n          name=\"email\"\r\n          label=\"Email\"\r\n          type=\"text\"\r\n          component={renderField} />\r\n        <Field\r\n          name=\"password\"\r\n          label=\"Password\"\r\n          type=\"text\"\r\n          component={renderField} />\r\n        <Field\r\n          name=\"age\"\r\n          label=\"Age\"\r\n          type=\"text\"\r\n          component={renderField} />\r\n        <div>\r\n          <button type=\"submit\" >Submit</button>\r\n        </div>\r\n      </form>\r\n    )\r\n  }\r\n}\r\n\r\nfunction mapStateToProps() {\r\n  return {};\r\n}\r\n\r\nexport default reduxForm({\r\n  form: 'loginForm',\r\n  destroyOnUnmount: false,\r\n})(connect(mapStateToProps, { signup })(withRouter(LoginForm)));\r\n","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport {\r\n  BrowserRouter,\r\n  Switch,\r\n  Route,\r\n  Link,\r\n  Redirect\r\n} from 'react-router-dom'\r\nimport Landing from '../Landing/Landing';\r\nimport LoginForm from '../LoginForm/LoginForm';\r\n\r\nclass App extends Component {\r\n\r\n  onButtonClick() {\r\n    var token = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI1ZDc3YTI1ZjFkODFiYjJmMjAyODFiYWYiLCJpYXQiOjE1NjgxMjE0Mzl9._zZzaepxO2ddT8MELCJ4Mm6V9wvfniosg042xyFEPUE\"\r\n\r\n    var headers = {headers: {'Content-Type': 'application/json', 'Authorization': 'Bearer ' + token}}\r\n\r\n    var request = axios.get('/users/me', headers);\r\n    request.then(({data, status}) => {\r\n      if (status === 200) {\r\n        console.log(data);\r\n      }\r\n    }).catch((error) => {\r\n      console.log(error);\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <BrowserRouter>\r\n          <div>\r\n            <Route exact path=\"/\" component={LoginForm} />\r\n            <Route exact path=\"/home\" component={Landing} />\r\n          </div>\r\n        </BrowserRouter>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { combineReducers } from 'redux';\r\nimport reducerUser from './reducerUser';\r\nimport { reducer as reduxForm } from 'redux-form';\r\n\r\nexport default combineReducers({\r\n  user: reducerUser,\r\n  form: reduxForm\r\n});\r\n","import { SIGNUP } from \"../actions\";\r\n\r\nexport default function(state = {}, action) {\r\n  switch (action.type) {\r\n    case SIGNUP:\r\n      return {...state, token: action.payload}\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport reduxThunk from 'redux-thunk';\nimport App from './components/EntryPoint/App';\nimport * as serviceWorker from './serviceWorker';\nimport reducers from './reducers';\n\n\n//ReactDOM.render(<App />, document.getElementById('root'));\n\nconst store = createStore(reducers, {}, applyMiddleware(reduxThunk));\n\nReactDOM.render(\n  <Provider store={store}><App /></Provider>,\n  document.querySelector('#root')\n);\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}